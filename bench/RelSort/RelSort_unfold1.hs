module RelSort_unfold1 where

import Stream
import Control.Monad
import Term

sortoI x0 = Immature $ msum [do {let {x1 = Zero};
                      let {x4 = Zero};
                      let {x3 = Succ x4};
                      let {x8 = Zero};
                      let {x7 = Succ x8};
                      let {x6 = Succ x7};
                      let {x13 = Zero};
                      let {x12 = Succ x13};
                      let {x11 = Succ x12};
                      let {x10 = Succ x11};
                      let {x14 = Nil};
                      let {x9 = Cons x10 x14};
                      let {x5 = Cons x6 x9};
                      let {x2 = Cons x3 x5};
                      (x15, x16) <- case x0 of
                                    {Cons y15 y16 -> return (y15, y16); _ -> mzero};
                      guard (x15 == x1);
                      guard (x16 == x2);
                      return ()},
                  do {let {x17 = Zero};
                      let {x20 = Zero};
                      let {x19 = Succ x20};
                      let {x25 = Zero};
                      let {x24 = Succ x25};
                      let {x23 = Succ x24};
                      let {x22 = Succ x23};
                      let {x29 = Zero};
                      let {x28 = Succ x29};
                      let {x27 = Succ x28};
                      let {x30 = Nil};
                      let {x26 = Cons x27 x30};
                      let {x21 = Cons x22 x26};
                      let {x18 = Cons x19 x21};
                      (x31, x32) <- case x0 of
                                    {Cons y31 y32 -> return (y31, y32); _ -> mzero};
                      guard (x31 == x17);
                      guard (x32 == x18);
                      return ()},
                  do {let {x33 = Zero};
                      let {x37 = Zero};
                      let {x36 = Succ x37};
                      let {x35 = Succ x36};
                      let {x40 = Zero};
                      let {x39 = Succ x40};
                      let {x45 = Zero};
                      let {x44 = Succ x45};
                      let {x43 = Succ x44};
                      let {x42 = Succ x43};
                      let {x46 = Nil};
                      let {x41 = Cons x42 x46};
                      let {x38 = Cons x39 x41};
                      let {x34 = Cons x35 x38};
                      (x47, x48) <- case x0 of
                                    {Cons y47 y48 -> return (y47, y48); _ -> mzero};
                      guard (x47 == x33);
                      guard (x48 == x34);
                      return ()},
                  do {let {x49 = Zero};
                      let {x53 = Zero};
                      let {x52 = Succ x53};
                      let {x51 = Succ x52};
                      let {x58 = Zero};
                      let {x57 = Succ x58};
                      let {x56 = Succ x57};
                      let {x55 = Succ x56};
                      let {x61 = Zero};
                      let {x60 = Succ x61};
                      let {x62 = Nil};
                      let {x59 = Cons x60 x62};
                      let {x54 = Cons x55 x59};
                      let {x50 = Cons x51 x54};
                      (x63, x64) <- case x0 of
                                    {Cons y63 y64 -> return (y63, y64); _ -> mzero};
                      guard (x63 == x49);
                      guard (x64 == x50);
                      return ()},
                  do {let {x66 = Zero};
                      let {x65 = Succ x66};
                      let {x68 = Zero};
                      let {x72 = Zero};
                      let {x71 = Succ x72};
                      let {x70 = Succ x71};
                      let {x77 = Zero};
                      let {x76 = Succ x77};
                      let {x75 = Succ x76};
                      let {x74 = Succ x75};
                      let {x78 = Nil};
                      let {x73 = Cons x74 x78};
                      let {x69 = Cons x70 x73};
                      let {x67 = Cons x68 x69};
                      (x79, x80) <- case x0 of
                                    {Cons y79 y80 -> return (y79, y80); _ -> mzero};
                      guard (x79 == x65);
                      guard (x80 == x67);
                      return ()},
                  do {let {x82 = Zero};
                      let {x81 = Succ x82};
                      let {x84 = Zero};
                      let {x89 = Zero};
                      let {x88 = Succ x89};
                      let {x87 = Succ x88};
                      let {x86 = Succ x87};
                      let {x93 = Zero};
                      let {x92 = Succ x93};
                      let {x91 = Succ x92};
                      let {x94 = Nil};
                      let {x90 = Cons x91 x94};
                      let {x85 = Cons x86 x90};
                      let {x83 = Cons x84 x85};
                      (x95, x96) <- case x0 of
                                    {Cons y95 y96 -> return (y95, y96); _ -> mzero};
                      guard (x95 == x81);
                      guard (x96 == x83);
                      return ()},
                  do {let {x98 = Zero};
                      let {x97 = Succ x98};
                      let {x102 = Zero};
                      let {x101 = Succ x102};
                      let {x100 = Succ x101};
                      let {x104 = Zero};
                      let {x109 = Zero};
                      let {x108 = Succ x109};
                      let {x107 = Succ x108};
                      let {x106 = Succ x107};
                      let {x110 = Nil};
                      let {x105 = Cons x106 x110};
                      let {x103 = Cons x104 x105};
                      let {x99 = Cons x100 x103};
                      (x111, x112) <- case x0 of
                                      {Cons y111 y112 -> return (y111, y112); _ -> mzero};
                      guard (x111 == x97);
                      guard (x112 == x99);
                      return ()},
                  do {let {x114 = Zero};
                      let {x113 = Succ x114};
                      let {x118 = Zero};
                      let {x117 = Succ x118};
                      let {x116 = Succ x117};
                      let {x123 = Zero};
                      let {x122 = Succ x123};
                      let {x121 = Succ x122};
                      let {x120 = Succ x121};
                      let {x125 = Zero};
                      let {x126 = Nil};
                      let {x124 = Cons x125 x126};
                      let {x119 = Cons x120 x124};
                      let {x115 = Cons x116 x119};
                      (x127, x128) <- case x0 of
                                      {Cons y127 y128 -> return (y127, y128); _ -> mzero};
                      guard (x127 == x113);
                      guard (x128 == x115);
                      return ()},
                  do {let {x129 = Zero};
                      let {x134 = Zero};
                      let {x133 = Succ x134};
                      let {x132 = Succ x133};
                      let {x131 = Succ x132};
                      let {x137 = Zero};
                      let {x136 = Succ x137};
                      let {x141 = Zero};
                      let {x140 = Succ x141};
                      let {x139 = Succ x140};
                      let {x142 = Nil};
                      let {x138 = Cons x139 x142};
                      let {x135 = Cons x136 x138};
                      let {x130 = Cons x131 x135};
                      (x143, x144) <- case x0 of
                                      {Cons y143 y144 -> return (y143, y144); _ -> mzero};
                      guard (x143 == x129);
                      guard (x144 == x130);
                      return ()},
                  do {let {x145 = Zero};
                      let {x150 = Zero};
                      let {x149 = Succ x150};
                      let {x148 = Succ x149};
                      let {x147 = Succ x148};
                      let {x154 = Zero};
                      let {x153 = Succ x154};
                      let {x152 = Succ x153};
                      let {x157 = Zero};
                      let {x156 = Succ x157};
                      let {x158 = Nil};
                      let {x155 = Cons x156 x158};
                      let {x151 = Cons x152 x155};
                      let {x146 = Cons x147 x151};
                      (x159, x160) <- case x0 of
                                      {Cons y159 y160 -> return (y159, y160); _ -> mzero};
                      guard (x159 == x145);
                      guard (x160 == x146);
                      return ()},
                  do {let {x162 = Zero};
                      let {x161 = Succ x162};
                      let {x167 = Zero};
                      let {x166 = Succ x167};
                      let {x165 = Succ x166};
                      let {x164 = Succ x165};
                      let {x169 = Zero};
                      let {x173 = Zero};
                      let {x172 = Succ x173};
                      let {x171 = Succ x172};
                      let {x174 = Nil};
                      let {x170 = Cons x171 x174};
                      let {x168 = Cons x169 x170};
                      let {x163 = Cons x164 x168};
                      (x175, x176) <- case x0 of
                                      {Cons y175 y176 -> return (y175, y176); _ -> mzero};
                      guard (x175 == x161);
                      guard (x176 == x163);
                      return ()},
                  do {let {x178 = Zero};
                      let {x177 = Succ x178};
                      let {x183 = Zero};
                      let {x182 = Succ x183};
                      let {x181 = Succ x182};
                      let {x180 = Succ x181};
                      let {x187 = Zero};
                      let {x186 = Succ x187};
                      let {x185 = Succ x186};
                      let {x189 = Zero};
                      let {x190 = Nil};
                      let {x188 = Cons x189 x190};
                      let {x184 = Cons x185 x188};
                      let {x179 = Cons x180 x184};
                      (x191, x192) <- case x0 of
                                      {Cons y191 y192 -> return (y191, y192); _ -> mzero};
                      guard (x191 == x177);
                      guard (x192 == x179);
                      return ()},
                  do {let {x195 = Zero};
                      let {x194 = Succ x195};
                      let {x193 = Succ x194};
                      let {x197 = Zero};
                      let {x200 = Zero};
                      let {x199 = Succ x200};
                      let {x205 = Zero};
                      let {x204 = Succ x205};
                      let {x203 = Succ x204};
                      let {x202 = Succ x203};
                      let {x206 = Nil};
                      let {x201 = Cons x202 x206};
                      let {x198 = Cons x199 x201};
                      let {x196 = Cons x197 x198};
                      (x207, x208) <- case x0 of
                                      {Cons y207 y208 -> return (y207, y208); _ -> mzero};
                      guard (x207 == x193);
                      guard (x208 == x196);
                      return ()},
                  do {let {x211 = Zero};
                      let {x210 = Succ x211};
                      let {x209 = Succ x210};
                      let {x213 = Zero};
                      let {x218 = Zero};
                      let {x217 = Succ x218};
                      let {x216 = Succ x217};
                      let {x215 = Succ x216};
                      let {x221 = Zero};
                      let {x220 = Succ x221};
                      let {x222 = Nil};
                      let {x219 = Cons x220 x222};
                      let {x214 = Cons x215 x219};
                      let {x212 = Cons x213 x214};
                      (x223, x224) <- case x0 of
                                      {Cons y223 y224 -> return (y223, y224); _ -> mzero};
                      guard (x223 == x209);
                      guard (x224 == x212);
                      return ()},
                  do {let {x227 = Zero};
                      let {x226 = Succ x227};
                      let {x225 = Succ x226};
                      let {x230 = Zero};
                      let {x229 = Succ x230};
                      let {x232 = Zero};
                      let {x237 = Zero};
                      let {x236 = Succ x237};
                      let {x235 = Succ x236};
                      let {x234 = Succ x235};
                      let {x238 = Nil};
                      let {x233 = Cons x234 x238};
                      let {x231 = Cons x232 x233};
                      let {x228 = Cons x229 x231};
                      (x239, x240) <- case x0 of
                                      {Cons y239 y240 -> return (y239, y240); _ -> mzero};
                      guard (x239 == x225);
                      guard (x240 == x228);
                      return ()},
                  do {let {x243 = Zero};
                      let {x242 = Succ x243};
                      let {x241 = Succ x242};
                      let {x246 = Zero};
                      let {x245 = Succ x246};
                      let {x251 = Zero};
                      let {x250 = Succ x251};
                      let {x249 = Succ x250};
                      let {x248 = Succ x249};
                      let {x253 = Zero};
                      let {x254 = Nil};
                      let {x252 = Cons x253 x254};
                      let {x247 = Cons x248 x252};
                      let {x244 = Cons x245 x247};
                      (x255, x256) <- case x0 of
                                      {Cons y255 y256 -> return (y255, y256); _ -> mzero};
                      guard (x255 == x241);
                      guard (x256 == x244);
                      return ()},
                  do {let {x259 = Zero};
                      let {x258 = Succ x259};
                      let {x257 = Succ x258};
                      let {x264 = Zero};
                      let {x263 = Succ x264};
                      let {x262 = Succ x263};
                      let {x261 = Succ x262};
                      let {x266 = Zero};
                      let {x269 = Zero};
                      let {x268 = Succ x269};
                      let {x270 = Nil};
                      let {x267 = Cons x268 x270};
                      let {x265 = Cons x266 x267};
                      let {x260 = Cons x261 x265};
                      (x271, x272) <- case x0 of
                                      {Cons y271 y272 -> return (y271, y272); _ -> mzero};
                      guard (x271 == x257);
                      guard (x272 == x260);
                      return ()},
                  do {let {x275 = Zero};
                      let {x274 = Succ x275};
                      let {x273 = Succ x274};
                      let {x280 = Zero};
                      let {x279 = Succ x280};
                      let {x278 = Succ x279};
                      let {x277 = Succ x278};
                      let {x283 = Zero};
                      let {x282 = Succ x283};
                      let {x285 = Zero};
                      let {x286 = Nil};
                      let {x284 = Cons x285 x286};
                      let {x281 = Cons x282 x284};
                      let {x276 = Cons x277 x281};
                      (x287, x288) <- case x0 of
                                      {Cons y287 y288 -> return (y287, y288); _ -> mzero};
                      guard (x287 == x273);
                      guard (x288 == x276);
                      return ()},
                  do {let {x292 = Zero};
                      let {x291 = Succ x292};
                      let {x290 = Succ x291};
                      let {x289 = Succ x290};
                      let {x294 = Zero};
                      let {x297 = Zero};
                      let {x296 = Succ x297};
                      let {x301 = Zero};
                      let {x300 = Succ x301};
                      let {x299 = Succ x300};
                      let {x302 = Nil};
                      let {x298 = Cons x299 x302};
                      let {x295 = Cons x296 x298};
                      let {x293 = Cons x294 x295};
                      (x303, x304) <- case x0 of
                                      {Cons y303 y304 -> return (y303, y304); _ -> mzero};
                      guard (x303 == x289);
                      guard (x304 == x293);
                      return ()},
                  do {let {x308 = Zero};
                      let {x307 = Succ x308};
                      let {x306 = Succ x307};
                      let {x305 = Succ x306};
                      let {x310 = Zero};
                      let {x314 = Zero};
                      let {x313 = Succ x314};
                      let {x312 = Succ x313};
                      let {x317 = Zero};
                      let {x316 = Succ x317};
                      let {x318 = Nil};
                      let {x315 = Cons x316 x318};
                      let {x311 = Cons x312 x315};
                      let {x309 = Cons x310 x311};
                      (x319, x320) <- case x0 of
                                      {Cons y319 y320 -> return (y319, y320); _ -> mzero};
                      guard (x319 == x305);
                      guard (x320 == x309);
                      return ()},
                  do {let {x324 = Zero};
                      let {x323 = Succ x324};
                      let {x322 = Succ x323};
                      let {x321 = Succ x322};
                      let {x327 = Zero};
                      let {x326 = Succ x327};
                      let {x329 = Zero};
                      let {x333 = Zero};
                      let {x332 = Succ x333};
                      let {x331 = Succ x332};
                      let {x334 = Nil};
                      let {x330 = Cons x331 x334};
                      let {x328 = Cons x329 x330};
                      let {x325 = Cons x326 x328};
                      (x335, x336) <- case x0 of
                                      {Cons y335 y336 -> return (y335, y336); _ -> mzero};
                      guard (x335 == x321);
                      guard (x336 == x325);
                      return ()},
                  do {let {x340 = Zero};
                      let {x339 = Succ x340};
                      let {x338 = Succ x339};
                      let {x337 = Succ x338};
                      let {x343 = Zero};
                      let {x342 = Succ x343};
                      let {x347 = Zero};
                      let {x346 = Succ x347};
                      let {x345 = Succ x346};
                      let {x349 = Zero};
                      let {x350 = Nil};
                      let {x348 = Cons x349 x350};
                      let {x344 = Cons x345 x348};
                      let {x341 = Cons x342 x344};
                      (x351, x352) <- case x0 of
                                      {Cons y351 y352 -> return (y351, y352); _ -> mzero};
                      guard (x351 == x337);
                      guard (x352 == x341);
                      return ()},
                  do {let {x356 = Zero};
                      let {x355 = Succ x356};
                      let {x354 = Succ x355};
                      let {x353 = Succ x354};
                      let {x360 = Zero};
                      let {x359 = Succ x360};
                      let {x358 = Succ x359};
                      let {x362 = Zero};
                      let {x365 = Zero};
                      let {x364 = Succ x365};
                      let {x366 = Nil};
                      let {x363 = Cons x364 x366};
                      let {x361 = Cons x362 x363};
                      let {x357 = Cons x358 x361};
                      (x367, x368) <- case x0 of
                                      {Cons y367 y368 -> return (y367, y368); _ -> mzero};
                      guard (x367 == x353);
                      guard (x368 == x357);
                      return ()},
                  do {let {x372 = Zero};
                      let {x371 = Succ x372};
                      let {x370 = Succ x371};
                      let {x369 = Succ x370};
                      let {x376 = Zero};
                      let {x375 = Succ x376};
                      let {x374 = Succ x375};
                      let {x379 = Zero};
                      let {x378 = Succ x379};
                      let {x381 = Zero};
                      let {x382 = Nil};
                      let {x380 = Cons x381 x382};
                      let {x377 = Cons x378 x380};
                      let {x373 = Cons x374 x377};
                      (x383, x384) <- case x0 of
                                      {Cons y383 y384 -> return (y383, y384); _ -> mzero};
                      guard (x383 == x369);
                      guard (x384 == x373);
                      return ()}]
                      
sortoO = Immature $ msum [do {let {x1 = Zero};
                   let {x4 = Zero};
                   let {x3 = Succ x4};
                   let {x8 = Zero};
                   let {x7 = Succ x8};
                   let {x6 = Succ x7};
                   let {x13 = Zero};
                   let {x12 = Succ x13};
                   let {x11 = Succ x12};
                   let {x10 = Succ x11};
                   let {x14 = Nil};
                   let {x9 = Cons x10 x14};
                   let {x5 = Cons x6 x9};
                   let {x2 = Cons x3 x5};
                   let {x15 = x1};
                   let {x16 = x2};
                   let {x0 = Cons x15 x16};
                   return x0},
               do {let {x17 = Zero};
                   let {x20 = Zero};
                   let {x19 = Succ x20};
                   let {x25 = Zero};
                   let {x24 = Succ x25};
                   let {x23 = Succ x24};
                   let {x22 = Succ x23};
                   let {x29 = Zero};
                   let {x28 = Succ x29};
                   let {x27 = Succ x28};
                   let {x30 = Nil};
                   let {x26 = Cons x27 x30};
                   let {x21 = Cons x22 x26};
                   let {x18 = Cons x19 x21};
                   let {x31 = x17};
                   let {x32 = x18};
                   let {x0 = Cons x31 x32};
                   return x0},
               do {let {x33 = Zero};
                   let {x37 = Zero};
                   let {x36 = Succ x37};
                   let {x35 = Succ x36};
                   let {x40 = Zero};
                   let {x39 = Succ x40};
                   let {x45 = Zero};
                   let {x44 = Succ x45};
                   let {x43 = Succ x44};
                   let {x42 = Succ x43};
                   let {x46 = Nil};
                   let {x41 = Cons x42 x46};
                   let {x38 = Cons x39 x41};
                   let {x34 = Cons x35 x38};
                   let {x47 = x33};
                   let {x48 = x34};
                   let {x0 = Cons x47 x48};
                   return x0},
               do {let {x49 = Zero};
                   let {x53 = Zero};
                   let {x52 = Succ x53};
                   let {x51 = Succ x52};
                   let {x58 = Zero};
                   let {x57 = Succ x58};
                   let {x56 = Succ x57};
                   let {x55 = Succ x56};
                   let {x61 = Zero};
                   let {x60 = Succ x61};
                   let {x62 = Nil};
                   let {x59 = Cons x60 x62};
                   let {x54 = Cons x55 x59};
                   let {x50 = Cons x51 x54};
                   let {x63 = x49};
                   let {x64 = x50};
                   let {x0 = Cons x63 x64};
                   return x0},
               do {let {x66 = Zero};
                   let {x65 = Succ x66};
                   let {x68 = Zero};
                   let {x72 = Zero};
                   let {x71 = Succ x72};
                   let {x70 = Succ x71};
                   let {x77 = Zero};
                   let {x76 = Succ x77};
                   let {x75 = Succ x76};
                   let {x74 = Succ x75};
                   let {x78 = Nil};
                   let {x73 = Cons x74 x78};
                   let {x69 = Cons x70 x73};
                   let {x67 = Cons x68 x69};
                   let {x79 = x65};
                   let {x80 = x67};
                   let {x0 = Cons x79 x80};
                   return x0},
               do {let {x82 = Zero};
                   let {x81 = Succ x82};
                   let {x84 = Zero};
                   let {x89 = Zero};
                   let {x88 = Succ x89};
                   let {x87 = Succ x88};
                   let {x86 = Succ x87};
                   let {x93 = Zero};
                   let {x92 = Succ x93};
                   let {x91 = Succ x92};
                   let {x94 = Nil};
                   let {x90 = Cons x91 x94};
                   let {x85 = Cons x86 x90};
                   let {x83 = Cons x84 x85};
                   let {x95 = x81};
                   let {x96 = x83};
                   let {x0 = Cons x95 x96};
                   return x0},
               do {let {x98 = Zero};
                   let {x97 = Succ x98};
                   let {x102 = Zero};
                   let {x101 = Succ x102};
                   let {x100 = Succ x101};
                   let {x104 = Zero};
                   let {x109 = Zero};
                   let {x108 = Succ x109};
                   let {x107 = Succ x108};
                   let {x106 = Succ x107};
                   let {x110 = Nil};
                   let {x105 = Cons x106 x110};
                   let {x103 = Cons x104 x105};
                   let {x99 = Cons x100 x103};
                   let {x111 = x97};
                   let {x112 = x99};
                   let {x0 = Cons x111 x112};
                   return x0},
               do {let {x114 = Zero};
                   let {x113 = Succ x114};
                   let {x118 = Zero};
                   let {x117 = Succ x118};
                   let {x116 = Succ x117};
                   let {x123 = Zero};
                   let {x122 = Succ x123};
                   let {x121 = Succ x122};
                   let {x120 = Succ x121};
                   let {x125 = Zero};
                   let {x126 = Nil};
                   let {x124 = Cons x125 x126};
                   let {x119 = Cons x120 x124};
                   let {x115 = Cons x116 x119};
                   let {x127 = x113};
                   let {x128 = x115};
                   let {x0 = Cons x127 x128};
                   return x0},
               do {let {x129 = Zero};
                   let {x134 = Zero};
                   let {x133 = Succ x134};
                   let {x132 = Succ x133};
                   let {x131 = Succ x132};
                   let {x137 = Zero};
                   let {x136 = Succ x137};
                   let {x141 = Zero};
                   let {x140 = Succ x141};
                   let {x139 = Succ x140};
                   let {x142 = Nil};
                   let {x138 = Cons x139 x142};
                   let {x135 = Cons x136 x138};
                   let {x130 = Cons x131 x135};
                   let {x143 = x129};
                   let {x144 = x130};
                   let {x0 = Cons x143 x144};
                   return x0},
               do {let {x145 = Zero};
                   let {x150 = Zero};
                   let {x149 = Succ x150};
                   let {x148 = Succ x149};
                   let {x147 = Succ x148};
                   let {x154 = Zero};
                   let {x153 = Succ x154};
                   let {x152 = Succ x153};
                   let {x157 = Zero};
                   let {x156 = Succ x157};
                   let {x158 = Nil};
                   let {x155 = Cons x156 x158};
                   let {x151 = Cons x152 x155};
                   let {x146 = Cons x147 x151};
                   let {x159 = x145};
                   let {x160 = x146};
                   let {x0 = Cons x159 x160};
                   return x0},
               do {let {x162 = Zero};
                   let {x161 = Succ x162};
                   let {x167 = Zero};
                   let {x166 = Succ x167};
                   let {x165 = Succ x166};
                   let {x164 = Succ x165};
                   let {x169 = Zero};
                   let {x173 = Zero};
                   let {x172 = Succ x173};
                   let {x171 = Succ x172};
                   let {x174 = Nil};
                   let {x170 = Cons x171 x174};
                   let {x168 = Cons x169 x170};
                   let {x163 = Cons x164 x168};
                   let {x175 = x161};
                   let {x176 = x163};
                   let {x0 = Cons x175 x176};
                   return x0},
               do {let {x178 = Zero};
                   let {x177 = Succ x178};
                   let {x183 = Zero};
                   let {x182 = Succ x183};
                   let {x181 = Succ x182};
                   let {x180 = Succ x181};
                   let {x187 = Zero};
                   let {x186 = Succ x187};
                   let {x185 = Succ x186};
                   let {x189 = Zero};
                   let {x190 = Nil};
                   let {x188 = Cons x189 x190};
                   let {x184 = Cons x185 x188};
                   let {x179 = Cons x180 x184};
                   let {x191 = x177};
                   let {x192 = x179};
                   let {x0 = Cons x191 x192};
                   return x0},
               do {let {x195 = Zero};
                   let {x194 = Succ x195};
                   let {x193 = Succ x194};
                   let {x197 = Zero};
                   let {x200 = Zero};
                   let {x199 = Succ x200};
                   let {x205 = Zero};
                   let {x204 = Succ x205};
                   let {x203 = Succ x204};
                   let {x202 = Succ x203};
                   let {x206 = Nil};
                   let {x201 = Cons x202 x206};
                   let {x198 = Cons x199 x201};
                   let {x196 = Cons x197 x198};
                   let {x207 = x193};
                   let {x208 = x196};
                   let {x0 = Cons x207 x208};
                   return x0},
               do {let {x211 = Zero};
                   let {x210 = Succ x211};
                   let {x209 = Succ x210};
                   let {x213 = Zero};
                   let {x218 = Zero};
                   let {x217 = Succ x218};
                   let {x216 = Succ x217};
                   let {x215 = Succ x216};
                   let {x221 = Zero};
                   let {x220 = Succ x221};
                   let {x222 = Nil};
                   let {x219 = Cons x220 x222};
                   let {x214 = Cons x215 x219};
                   let {x212 = Cons x213 x214};
                   let {x223 = x209};
                   let {x224 = x212};
                   let {x0 = Cons x223 x224};
                   return x0},
               do {let {x227 = Zero};
                   let {x226 = Succ x227};
                   let {x225 = Succ x226};
                   let {x230 = Zero};
                   let {x229 = Succ x230};
                   let {x232 = Zero};
                   let {x237 = Zero};
                   let {x236 = Succ x237};
                   let {x235 = Succ x236};
                   let {x234 = Succ x235};
                   let {x238 = Nil};
                   let {x233 = Cons x234 x238};
                   let {x231 = Cons x232 x233};
                   let {x228 = Cons x229 x231};
                   let {x239 = x225};
                   let {x240 = x228};
                   let {x0 = Cons x239 x240};
                   return x0},
               do {let {x243 = Zero};
                   let {x242 = Succ x243};
                   let {x241 = Succ x242};
                   let {x246 = Zero};
                   let {x245 = Succ x246};
                   let {x251 = Zero};
                   let {x250 = Succ x251};
                   let {x249 = Succ x250};
                   let {x248 = Succ x249};
                   let {x253 = Zero};
                   let {x254 = Nil};
                   let {x252 = Cons x253 x254};
                   let {x247 = Cons x248 x252};
                   let {x244 = Cons x245 x247};
                   let {x255 = x241};
                   let {x256 = x244};
                   let {x0 = Cons x255 x256};
                   return x0},
               do {let {x259 = Zero};
                   let {x258 = Succ x259};
                   let {x257 = Succ x258};
                   let {x264 = Zero};
                   let {x263 = Succ x264};
                   let {x262 = Succ x263};
                   let {x261 = Succ x262};
                   let {x266 = Zero};
                   let {x269 = Zero};
                   let {x268 = Succ x269};
                   let {x270 = Nil};
                   let {x267 = Cons x268 x270};
                   let {x265 = Cons x266 x267};
                   let {x260 = Cons x261 x265};
                   let {x271 = x257};
                   let {x272 = x260};
                   let {x0 = Cons x271 x272};
                   return x0},
               do {let {x275 = Zero};
                   let {x274 = Succ x275};
                   let {x273 = Succ x274};
                   let {x280 = Zero};
                   let {x279 = Succ x280};
                   let {x278 = Succ x279};
                   let {x277 = Succ x278};
                   let {x283 = Zero};
                   let {x282 = Succ x283};
                   let {x285 = Zero};
                   let {x286 = Nil};
                   let {x284 = Cons x285 x286};
                   let {x281 = Cons x282 x284};
                   let {x276 = Cons x277 x281};
                   let {x287 = x273};
                   let {x288 = x276};
                   let {x0 = Cons x287 x288};
                   return x0},
               do {let {x292 = Zero};
                   let {x291 = Succ x292};
                   let {x290 = Succ x291};
                   let {x289 = Succ x290};
                   let {x294 = Zero};
                   let {x297 = Zero};
                   let {x296 = Succ x297};
                   let {x301 = Zero};
                   let {x300 = Succ x301};
                   let {x299 = Succ x300};
                   let {x302 = Nil};
                   let {x298 = Cons x299 x302};
                   let {x295 = Cons x296 x298};
                   let {x293 = Cons x294 x295};
                   let {x303 = x289};
                   let {x304 = x293};
                   let {x0 = Cons x303 x304};
                   return x0},
               do {let {x308 = Zero};
                   let {x307 = Succ x308};
                   let {x306 = Succ x307};
                   let {x305 = Succ x306};
                   let {x310 = Zero};
                   let {x314 = Zero};
                   let {x313 = Succ x314};
                   let {x312 = Succ x313};
                   let {x317 = Zero};
                   let {x316 = Succ x317};
                   let {x318 = Nil};
                   let {x315 = Cons x316 x318};
                   let {x311 = Cons x312 x315};
                   let {x309 = Cons x310 x311};
                   let {x319 = x305};
                   let {x320 = x309};
                   let {x0 = Cons x319 x320};
                   return x0},
               do {let {x324 = Zero};
                   let {x323 = Succ x324};
                   let {x322 = Succ x323};
                   let {x321 = Succ x322};
                   let {x327 = Zero};
                   let {x326 = Succ x327};
                   let {x329 = Zero};
                   let {x333 = Zero};
                   let {x332 = Succ x333};
                   let {x331 = Succ x332};
                   let {x334 = Nil};
                   let {x330 = Cons x331 x334};
                   let {x328 = Cons x329 x330};
                   let {x325 = Cons x326 x328};
                   let {x335 = x321};
                   let {x336 = x325};
                   let {x0 = Cons x335 x336};
                   return x0},
               do {let {x340 = Zero};
                   let {x339 = Succ x340};
                   let {x338 = Succ x339};
                   let {x337 = Succ x338};
                   let {x343 = Zero};
                   let {x342 = Succ x343};
                   let {x347 = Zero};
                   let {x346 = Succ x347};
                   let {x345 = Succ x346};
                   let {x349 = Zero};
                   let {x350 = Nil};
                   let {x348 = Cons x349 x350};
                   let {x344 = Cons x345 x348};
                   let {x341 = Cons x342 x344};
                   let {x351 = x337};
                   let {x352 = x341};
                   let {x0 = Cons x351 x352};
                   return x0},
               do {let {x356 = Zero};
                   let {x355 = Succ x356};
                   let {x354 = Succ x355};
                   let {x353 = Succ x354};
                   let {x360 = Zero};
                   let {x359 = Succ x360};
                   let {x358 = Succ x359};
                   let {x362 = Zero};
                   let {x365 = Zero};
                   let {x364 = Succ x365};
                   let {x366 = Nil};
                   let {x363 = Cons x364 x366};
                   let {x361 = Cons x362 x363};
                   let {x357 = Cons x358 x361};
                   let {x367 = x353};
                   let {x368 = x357};
                   let {x0 = Cons x367 x368};
                   return x0},
               do {let {x372 = Zero};
                   let {x371 = Succ x372};
                   let {x370 = Succ x371};
                   let {x369 = Succ x370};
                   let {x376 = Zero};
                   let {x375 = Succ x376};
                   let {x374 = Succ x375};
                   let {x379 = Zero};
                   let {x378 = Succ x379};
                   let {x381 = Zero};
                   let {x382 = Nil};
                   let {x380 = Cons x381 x382};
                   let {x377 = Cons x378 x380};
                   let {x373 = Cons x374 x377};
                   let {x383 = x369};
                   let {x384 = x373};
                   let {x0 = Cons x383 x384};
                   return x0}]