open GT
open OCanren
open OCanren.Std
open Helper

let topLevel x0 x1 = let rec isPath y0 y1 = (fresh (q1 q2 q3 q4 q5 q6 q7 q8 q9) ((((((y0 === (Std.List.nil ())) ||| (y0 === (Std.(%) (q1) ((Std.List.nil ()))))) ||| (((y0 === (Std.(%) (Nat.zero) ((Std.(%) (q2) (q3))))) &&& (y1 === (Std.(%) ((Pair.pair (Nat.zero) (q4))) (q5)))) &&& ((_eqNat q2 q4 !!true) &&& (isPath ((Std.(%) (q2) (q3))) ((Std.(%) ((Pair.pair (Nat.zero) (q4))) (q5))))))) ||| (((y0 === (Std.(%) ((Nat.succ (q6))) ((Std.(%) (q2) (q3))))) &&& (y1 === (Std.(%) ((Pair.pair ((Nat.succ (q7))) (q4))) (q5)))) &&& ((_eqNat q6 q7 !!true) &&& ((_eqNat q2 q4 !!true) &&& (isPath ((Std.(%) (q2) (q3))) ((Std.(%) ((Pair.pair ((Nat.succ (q7))) (q4))) (q5)))))))) ||| (((y0 === (Std.(%) (q8) ((Std.(%) (q2) (q3))))) &&& (y1 === (Std.(%) (q9) (q5)))) &&& ((eqPairElem q8 q2 q9 q5) &&& (isPath ((Std.(%) (q2) (q3))) ((Std.(%) (q9) (q5))))))))) and eqPairElem y4 y5 y6 y7 = (fresh (q1 q2 q3 q4 q5 q6) ((((((((y6 === (Pair.pair (Nat.zero) (q1))) &&& (y4 === (Nat.succ (q2)))) &&& (eqNatElem y7 y5 q1 q2)) ||| (((y6 === (Pair.pair ((Nat.succ (q3))) (q1))) &&& (y4 === Nat.zero)) &&& (_eqNatElem y7 y5 q1 q4))) ||| (((y6 === (Pair.pair ((Nat.succ (q5))) (q1))) &&& (y4 === (Nat.succ (q6)))) &&& ((__eqNatElem y7 y5 q6 q5) &&& (_eqNat y5 q1 q4)))) ||| (((y6 === (Pair.pair (Nat.zero) (q1))) &&& (y4 === Nat.zero)) &&& (_eqNatElem y7 y5 q1 !!false))) ||| (((y6 === (Pair.pair ((Nat.succ (q5))) (q1))) &&& (y4 === (Nat.succ (q6)))) &&& ((___eqNatElem y7 y5 q6 q5) &&& (_eqNat y5 q1 !!false)))))) and eqNatElem y8 y9 y10 y12 = (fresh (q1 q2 q3 q4 q5) (((((((y9 === Nat.zero) &&& (y10 === Nat.zero)) &&& (elem y8 y12 Nat.zero)) ||| (((y9 === (Nat.succ (q1))) &&& (y10 === Nat.zero)) &&& (elem y8 y12 ((Nat.succ (q1)))))) ||| (((y9 === Nat.zero) &&& (y10 === (Nat.succ (q2)))) &&& (elem y8 y12 Nat.zero))) ||| (((y9 === (Nat.succ (q3))) &&& (y10 === (Nat.succ (q4)))) &&& ((_eqNat q3 q4 q5) &&& (elem y8 y12 ((Nat.succ (q3))))))))) and elem y13 y14 y15 = (fresh (q1 q2 q3 q4 q5) ((((((y13 === (Std.(%) ((Pair.pair ((Nat.succ (Nat.zero))) (q1))) (q2))) &&& (y14 === Nat.zero)) &&& (_eqNat y15 q1 !!true)) ||| (((y13 === (Std.(%) ((Pair.pair ((Nat.succ ((Nat.succ (q3))))) (q1))) (q2))) &&& (y14 === (Nat.succ (q4)))) &&& ((_eqNat q4 q3 !!true) &&& (_eqNat y15 q1 !!true)))) ||| ((y13 === (Std.(%) (q5) (q2))) &&& (eqPairElem ((Nat.succ (y14))) y15 q5 q2))))) and _eqNatElem y19 y20 y21 y22 = (fresh (q1 q2 q3 q4) (((((((y20 === Nat.zero) &&& ((y21 === Nat.zero) &&& (y22 === !!true))) &&& (_elem y19 Nat.zero)) ||| (((y20 === (Nat.succ (q1))) &&& ((y21 === Nat.zero) &&& (y22 === !!false))) &&& (_elem y19 ((Nat.succ (q1)))))) ||| (((y20 === Nat.zero) &&& ((y21 === (Nat.succ (q2))) &&& (y22 === !!false))) &&& (_elem y19 Nat.zero))) ||| (((y20 === (Nat.succ (q3))) &&& (y21 === (Nat.succ (q4)))) &&& ((_eqNat q3 q4 y22) &&& (_elem y19 ((Nat.succ (q3))))))))) and _elem y23 y24 = (fresh (q1 q2 q3) ((((y23 === (Std.(%) ((Pair.pair (Nat.zero) (q1))) (q2))) &&& (_eqNat y24 q1 !!true)) ||| ((y23 === (Std.(%) (q3) (q2))) &&& (eqPairElem Nat.zero y24 q3 q2))))) and __eqNatElem y27 y28 y29 y30 = (fresh (q1 q2 q3 q4) ((((((y29 === (Nat.succ (q1))) &&& (y30 === Nat.zero)) &&& (elem y27 ((Nat.succ (q1))) y28)) ||| (((y29 === Nat.zero) &&& (y30 === (Nat.succ (q2)))) &&& (elem y27 Nat.zero y28))) ||| (((y29 === (Nat.succ (q3))) &&& (y30 === (Nat.succ (q4)))) &&& ((_eqNat q3 q4 !!false) &&& (elem y27 ((Nat.succ (q3))) y28)))))) and _eqNat y31 y32 y33 = (fresh (q1 q2 q3 q4) ((((((y31 === Nat.zero) &&& ((y32 === Nat.zero) &&& (y33 === !!true))) ||| ((y31 === (Nat.succ (q1))) &&& ((y32 === Nat.zero) &&& (y33 === !!false)))) ||| ((y31 === Nat.zero) &&& ((y32 === (Nat.succ (q2))) &&& (y33 === !!false)))) ||| (((y31 === (Nat.succ (q3))) &&& (y32 === (Nat.succ (q4)))) &&& (_eqNat q3 q4 y33))))) and ___eqNatElem y34 y35 y36 y37 = (fresh (q1 q2) (((((y36 === Nat.zero) &&& (y37 === Nat.zero)) &&& (elem y34 Nat.zero y35)) ||| (((y36 === (Nat.succ (q1))) &&& (y37 === (Nat.succ (q2)))) &&& ((_eqNat q1 q2 !!true) &&& (elem y34 ((Nat.succ (q1))) y35)))))) in          (isPath x0 x1)
