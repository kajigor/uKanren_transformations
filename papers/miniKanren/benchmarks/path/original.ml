open GT
open OCanren
open OCanren.Std
open Helper

let topLevel x0 x1 = let rec eqNat a b q24 = (fresh (q25) (((q25 === (Pair.pair (a) (b))) &&& (((q25 === (Pair.pair (Nat.zero) (Nat.zero))) &&& (q24 === !!true)) ||| ((fresh (q27) (((q25 === (Pair.pair ((Nat.succ (q27))) (Nat.zero))) &&& (q24 === !!false)))) ||| ((fresh (q29) (((q25 === (Pair.pair (Nat.zero) ((Nat.succ (q29))))) &&& (q24 === !!false)))) ||| (fresh (y x) (((q25 === (Pair.pair ((Nat.succ (x))) ((Nat.succ (y))))) &&& (eqNat x y q24)))))))))) and eqPair a b q15 = (fresh (q18 q17 b2 b1 a2 a1 q16) (((q16 === (Pair.pair (a) (b))) &&& ((q16 === (Pair.pair ((Pair.pair (a1) (a2))) ((Pair.pair (b1) (b2))))) &&& ((eqNat a1 b1 q17) &&& ((eqNat a2 b2 q18) &&& (((q17 === !!false) &&& (q15 === !!false)) ||| ((q17 === !!true) &&& (q15 === q18))))))))) and elem x g q10 = (((g === (Std.List.nil ())) &&& (q10 === !!false)) ||| (fresh (q13 ys y) (((g === (Std.(%) (y) (ys))) &&& ((eqPair x y q13) &&& (((q13 === !!true) &&& (q10 === !!true)) ||| ((q13 === !!false) &&& (elem x ys q10)))))))) and isPath c g q0 = (((c === (Std.List.nil ())) &&& (q0 === !!true)) ||| ((fresh (q2) (((c === (Std.(%) (q2) ((Std.List.nil ())))) &&& (q0 === !!true)))) ||| (fresh (q5 q4 xs x2 x1) (((c === (Std.(%) (x1) ((Std.(%) (x2) (xs))))) &&& ((elem ((Pair.pair (x1) (x2))) g q4) &&& ((isPath ((Std.(%) (x2) (xs))) g q5) &&& (((q4 === !!false) &&& (q0 === !!false)) ||| ((q4 === !!true) &&& (q0 === q5)))))))))) in     (((isPath x0 x1 !!true)))
