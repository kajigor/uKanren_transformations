Review #9A
===========================================================================

Overall merit
-------------
4. Accept

Reviewer expertise
------------------
2. Some familiarity

Paper summary
-------------
This paper presents a new approach for partial deduction in miniKanren, based on a heuristic for selecting relations to unfold, which is intended to improve execution time. Previous partial deduction approaches can improve running time, but give inconsistent results and often depend on whether the program is run forwards or backwards.

Comments for author
-------------------
The paper is clear and easy to read, though I am not an expert in supercompilation or previous approaches for partial deduction in miniKanren. My understanding is that the heuristic for unfolding is the most important novel feature of the approach; the selection of the heuristic makes intuitive sense to me, but it would be nice to see some discussion of why this particular heuristic was selected. In fact, a systematic investigation of which features of a relation are most predictive of a particular unfolding leading to a contradiction would be an interesting piece of work in itself.

The evaluation results suggest that the paper's approach is more consistent than previous ones, but not always the best. I agree with the conclusion that more work is needed on this problem.


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #9B
===========================================================================

Overall merit
-------------
3. Weak accept

Reviewer expertise
------------------
3. Knowledgeable

Paper summary
-------------
The authors study particular program specialization techniques as
applied to a logic or relational programming language. They both
survey the domain generally and in particular on supercompilation and
applications of specialization to logic programming. They introduce
their conjunctive partial deduction technique, explain their
heuristics, and analyze the effectiveness of their techniques on four
problems---two problems they formulate here and two others they
obtained from existing literature. They conclude noting that the most
general problem is still open.

Comments for author
-------------------
The authors study particular program specialization techniques as
applied to a logic or relational programming language. They both
survey the domain generally and in particular on supercompilation and
applications of specialization to logic programming. They introduce
their conjunctive partial deduction technique, explain their
heuristics, and analyze the effectiveness of their techniques on four
problems---two problems they formulate here and two others they
obtained from existing literature. They conclude noting that the most
general problem is still open.

In general, I prefer having the review=true option on when reading a
draft; having the line numbers helps me pinpoint comments to the
author. Other reviewers might also find this helpful too.

This discussion is well motivated and I thought gently introduces a
non-specialist to the area. For work so focused on improving
performance in particular application areas, I found the performance
results at the end somewhat underwhelming. I would love to have known
more of why those particular examples were chosen. Two were existing
benchmarks in the related literature, but still, that could use some
explanation.

I have not read 13, but it would be useful to mention here why that
unification is prototypical or exemplary of the behavior you want to
capture. Verifying to the reader that it is, in fact, a well-chosen
example would be a good use of an additional sentence. If these are
carefully chosen examples benchmarked at carefully chosen points, that
would be helpful to know and assuage the curious reader.  The actual
end performance results were a little underwhelming, but the journey
sufficiently justifies this submission even in it does not right now
present the general success they hope to achieve.

The first line of pg 4 is I think the first time you introduce us to
the term "non-conjunctive partial deduction." It appears as the title
of this section, and also in the label of Figure 1, but this is the
first time it appears in prose. Even sign-posting forward references,
either toward the front of this section or sooner, would help.

The typical miniKanren search strategy is itself interleaving over a
left-to-right depth-first search. Are those sub-portions of the
evaluation more amenable to the older Prolog techniques? Also, I'm not
sure it follows necessarily that complete search means re-ordering
goals is safe, full stop. I know you'll expound after page 1, but we
can be more precise here with just different words. I presume we mean
reordering _finitely_ many goals, offline/ahead-of-time yes? One
imagines perverse online re-orderings that continually, infinitely
bury certain goals.

You might consider employing the following prose linters.

```
$ detex foo.tex | diction -s
$ detex foo.tex | style -n
```

In the 2nd pgh of S1, when you say "different directions", this is
what others refer to as "multiple modes", yes? If so, established
terminology probably preferred. If not, it would help to distinguish
it here.

"In general, it is possible to create a solver for a recognizer by
translating it into miniKanren and running it in the appropriate
direction" This makes me want to ask P/NP questions Should those be
addressed? Does separation foreclose this possibility?

I have a tough time unambiguously parsing the last sentence of sec1
pgh 3.  Does "In other cases, unfortunately, conjunctive partial
deduction does not improve performance and can even make the program
\emph{less} performant." equally convey what you mean? That helps me
more. "Performance" is ambiguous enough to mean many things (memory
usage? network latency?), and I imagine you're limiting the discussion
to speed/throughput. It would help to write in terms of the specific
performance metric you're using in these last two sentences.

I'm surprised that in Figure 1, you did not want to use \tt for the
code-ish portions. Something about that mixture of serif fonts, line
numbers, and an algorithmic environment feels askew. If \tt isn't the
correct answer, I think at least something else should be.

Smaller details



pg 3


"for it with the one exception: it is allowed to" I got what you meant
contextually, but the anaphora obscure your meaning.

Canonical normal form. Is this related to/equivalent of canonical
logic programs? A term in general usage re: LP

I actually have trouble understanding how fresh variable introduction
fits into canonical normal form. "We assume all fresh variables to be
introduced into the scope", I do read that, but I can't tell does that
just mean to say that all fresh variables have been introduced into
scope (say by a '(fresh (....) ...)?'). Or is this saying something
more? If the former, then where to those freshes fit with regard to
canonical normal form?



pg 4.


We say "In the implementation of evalo", but we do have two
implementations. It would help the reader to point out which you mean.

s/the different number/different number/, and if you can phrase that
sentence in active voice it would help me.



s/generated by adding branching/generated by adding the branching/




* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #9C
===========================================================================

Overall merit
-------------
3. Weak accept

Reviewer expertise
------------------
2. Some familiarity

Paper summary
-------------
This work introduces a new approach for improving the performance in MINIKANREN. The authors introduce an approach, non-CPD, that uses partial deduction which uses a heuristic to select the most suitable relation call to unfold at each step of deriving. The evaluation results show that there is no best approach for all relational programs.

Comments for author
-------------------
It is important to improve the performance of MINIKANREN.
Although the novel approach is not the best for all relational programs,
it is pretty better for one example and better for another example.
The possibility of non-CPD looks nice.

The following points might improve the paper.
- Although I understand that it will be difficult to know which approach might be better for which kinds of programs, such (informal) feeling will be helpful to know the examples used in this paper are not too specific.
- I understand the evaluation results in Section 4.2 uses the heuristic in Section 3.2. If we remove the heuristic, how is the result?

- small thing:
Section 3, -4 Line: fig. 2 -> Fig. 2 (For Figure 1, FIg. 1 is used).
