digraph {
    graph [rankdir=TB
          ,bgcolor=transparent];
    node [shape=box
         ,fillcolor=white
         ,style=filled];
    0 [label=<O <BR/> notEqStick(Thr, v<SUB>424</SUB>, Trueo)>];
    1 [label=<C <BR/> get(One, C Triple [[] [] 0 : 1 : [2]], []), set(One, [0], C Triple [[] [] 1 : [2]], v<SUB>422</SUB>), check(v<SUB>422</SUB>, v<SUB>421</SUB>, Trueo) <BR/>  [ v<SUB>424</SUB> &rarr; One ] >];
    2 [label=<C <BR/> get(Two, C Triple [[] [] 0 : 1 : [2]], []), set(Two, [0], C Triple [[] [] 1 : [2]], v<SUB>422</SUB>), check(v<SUB>422</SUB>, v<SUB>421</SUB>, Trueo) <BR/>  [ v<SUB>424</SUB> &rarr; Two ] >];
    3 [label=<O <BR/> get(One, C Triple [[] [] 0 : 1 : [2]], [])>];
    4 [label=<C <BR/> set(One, [0], C Triple [[] [] 1 : [2]], v<SUB>422</SUB>), check(v<SUB>422</SUB>, v<SUB>421</SUB>, Trueo) <BR/>  [ v<SUB>424</SUB> &rarr; One, v<SUB>441</SUB> &rarr; [], v<SUB>442</SUB> &rarr; [], v<SUB>443</SUB> &rarr; 0 : 1 : [2] ] >];
    5 [label=<O <BR/> set(One, [0], C Triple [[] [] 1 : [2]], v<SUB>422</SUB>)>];
    6 [label=<C <BR/> check(C Triple [[0] [] 1 : [2]], v<SUB>421</SUB>, Trueo) <BR/>  [ v<SUB>422</SUB> &rarr; C Triple [[0] v<SUB>445</SUB> v<SUB>446</SUB>], v<SUB>424</SUB> &rarr; One, v<SUB>441</SUB> &rarr; [], v<SUB>442</SUB> &rarr; [], v<SUB>443</SUB> &rarr; 0 : 1 : [2], v<SUB>444</SUB> &rarr; [], v<SUB>445</SUB> &rarr; [], v<SUB>446</SUB> &rarr; 1 : [2] ] >];
    7 [label=<Leaf <BR/> check(C Triple [[0] [] 1 : [2]], v<SUB>421</SUB>, Trueo) <BR/>  [ v<SUB>422</SUB> &rarr; C Triple [[0] v<SUB>445</SUB> v<SUB>446</SUB>], v<SUB>424</SUB> &rarr; One, v<SUB>441</SUB> &rarr; [], v<SUB>442</SUB> &rarr; [], v<SUB>443</SUB> &rarr; 0 : 1 : [2], v<SUB>444</SUB> &rarr; [], v<SUB>445</SUB> &rarr; [], v<SUB>446</SUB> &rarr; 1 : [2] ] >];
    8 [label=<O <BR/> get(Two, C Triple [[] [] 0 : 1 : [2]], [])>];
    9 [label=<C <BR/> set(Two, [0], C Triple [[] [] 1 : [2]], v<SUB>422</SUB>), check(v<SUB>422</SUB>, v<SUB>421</SUB>, Trueo) <BR/>  [ v<SUB>424</SUB> &rarr; Two, v<SUB>441</SUB> &rarr; [], v<SUB>442</SUB> &rarr; [], v<SUB>443</SUB> &rarr; 0 : 1 : [2] ] >];
    10 [label=<O <BR/> set(Two, [0], C Triple [[] [] 1 : [2]], v<SUB>422</SUB>)>];
    11 [label=<C <BR/> check(C Triple [[] [0] 1 : [2]], v<SUB>421</SUB>, Trueo) <BR/>  [ v<SUB>422</SUB> &rarr; C Triple [v<SUB>444</SUB> [0] v<SUB>446</SUB>], v<SUB>424</SUB> &rarr; Two, v<SUB>441</SUB> &rarr; [], v<SUB>442</SUB> &rarr; [], v<SUB>443</SUB> &rarr; 0 : 1 : [2], v<SUB>444</SUB> &rarr; [], v<SUB>445</SUB> &rarr; [], v<SUB>446</SUB> &rarr; 1 : [2] ] >];
    12 [label=<Leaf <BR/> check(C Triple [[] [0] 1 : [2]], v<SUB>421</SUB>, Trueo) <BR/>  [ v<SUB>422</SUB> &rarr; C Triple [v<SUB>444</SUB> [0] v<SUB>446</SUB>], v<SUB>424</SUB> &rarr; Two, v<SUB>441</SUB> &rarr; [], v<SUB>442</SUB> &rarr; [], v<SUB>443</SUB> &rarr; 0 : 1 : [2], v<SUB>444</SUB> &rarr; [], v<SUB>445</SUB> &rarr; [], v<SUB>446</SUB> &rarr; 1 : [2] ] >];
    0 -> 1 [label=""];
    0 -> 2 [label=""];
    1 -> 3 [label=""];
    2 -> 8 [label=""];
    3 -> 4 [label=""];
    4 -> 5 [label=""];
    5 -> 6 [label=""];
    6 -> 7 [label=""];
    8 -> 9 [label=""];
    9 -> 10 [label=""];
    10 -> 11 [label=""];
    11 -> 12 [label=""];
}