digraph {
    graph [rankdir=TB
          ,bgcolor=transparent];
    node [shape=box
         ,fillcolor=white
         ,style=filled];
    0 [label=<O <BR/> notEqStick(Two, v<SUB>550</SUB>, Trueo)>];
    1 [label=<C <BR/> get(One, C Triple [[] 0 : 1 : [2] []], []), set(One, [0], C Triple [[] 1 : [2] []], v<SUB>548</SUB>), check(v<SUB>548</SUB>, v<SUB>547</SUB>, Trueo) <BR/>  [ v<SUB>550</SUB> &rarr; One ] >];
    2 [label=<C <BR/> get(Thr, C Triple [[] 0 : 1 : [2] []], []), set(Thr, [0], C Triple [[] 1 : [2] []], v<SUB>548</SUB>), check(v<SUB>548</SUB>, v<SUB>547</SUB>, Trueo) <BR/>  [ v<SUB>550</SUB> &rarr; Thr ] >];
    3 [label=<O <BR/> get(One, C Triple [[] 0 : 1 : [2] []], [])>];
    4 [label=<C <BR/> set(One, [0], C Triple [[] 1 : [2] []], v<SUB>548</SUB>), check(v<SUB>548</SUB>, v<SUB>547</SUB>, Trueo) <BR/>  [ v<SUB>550</SUB> &rarr; One, v<SUB>567</SUB> &rarr; [], v<SUB>568</SUB> &rarr; 0 : 1 : [2], v<SUB>569</SUB> &rarr; [] ] >];
    5 [label=<O <BR/> set(One, [0], C Triple [[] 1 : [2] []], v<SUB>548</SUB>)>];
    6 [label=<C <BR/> check(C Triple [[0] 1 : [2] []], v<SUB>547</SUB>, Trueo) <BR/>  [ v<SUB>548</SUB> &rarr; C Triple [[0] v<SUB>571</SUB> v<SUB>572</SUB>], v<SUB>550</SUB> &rarr; One, v<SUB>567</SUB> &rarr; [], v<SUB>568</SUB> &rarr; 0 : 1 : [2], v<SUB>569</SUB> &rarr; [], v<SUB>570</SUB> &rarr; [], v<SUB>571</SUB> &rarr; 1 : [2], v<SUB>572</SUB> &rarr; [] ] >];
    7 [label=<Leaf <BR/> check(C Triple [[0] 1 : [2] []], v<SUB>547</SUB>, Trueo) <BR/>  [ v<SUB>548</SUB> &rarr; C Triple [[0] v<SUB>571</SUB> v<SUB>572</SUB>], v<SUB>550</SUB> &rarr; One, v<SUB>567</SUB> &rarr; [], v<SUB>568</SUB> &rarr; 0 : 1 : [2], v<SUB>569</SUB> &rarr; [], v<SUB>570</SUB> &rarr; [], v<SUB>571</SUB> &rarr; 1 : [2], v<SUB>572</SUB> &rarr; [] ] >];
    8 [label=<O <BR/> get(Thr, C Triple [[] 0 : 1 : [2] []], [])>];
    9 [label=<C <BR/> set(Thr, [0], C Triple [[] 1 : [2] []], v<SUB>548</SUB>), check(v<SUB>548</SUB>, v<SUB>547</SUB>, Trueo) <BR/>  [ v<SUB>550</SUB> &rarr; Thr, v<SUB>567</SUB> &rarr; [], v<SUB>568</SUB> &rarr; 0 : 1 : [2], v<SUB>569</SUB> &rarr; [] ] >];
    10 [label=<O <BR/> set(Thr, [0], C Triple [[] 1 : [2] []], v<SUB>548</SUB>)>];
    11 [label=<C <BR/> check(C Triple [[] 1 : [2] [0]], v<SUB>547</SUB>, Trueo) <BR/>  [ v<SUB>548</SUB> &rarr; C Triple [v<SUB>570</SUB> v<SUB>571</SUB> [0]], v<SUB>550</SUB> &rarr; Thr, v<SUB>567</SUB> &rarr; [], v<SUB>568</SUB> &rarr; 0 : 1 : [2], v<SUB>569</SUB> &rarr; [], v<SUB>570</SUB> &rarr; [], v<SUB>571</SUB> &rarr; 1 : [2], v<SUB>572</SUB> &rarr; [] ] >];
    12 [label=<Leaf <BR/> check(C Triple [[] 1 : [2] [0]], v<SUB>547</SUB>, Trueo) <BR/>  [ v<SUB>548</SUB> &rarr; C Triple [v<SUB>570</SUB> v<SUB>571</SUB> [0]], v<SUB>550</SUB> &rarr; Thr, v<SUB>567</SUB> &rarr; [], v<SUB>568</SUB> &rarr; 0 : 1 : [2], v<SUB>569</SUB> &rarr; [], v<SUB>570</SUB> &rarr; [], v<SUB>571</SUB> &rarr; 1 : [2], v<SUB>572</SUB> &rarr; [] ] >];
    0 -> 1 [label=""];
    0 -> 2 [label=""];
    1 -> 3 [label=""];
    2 -> 8 [label=""];
    3 -> 4 [label=""];
    4 -> 5 [label=""];
    5 -> 6 [label=""];
    6 -> 7 [label=""];
    8 -> 9 [label=""];
    9 -> 10 [label=""];
    10 -> 11 [label=""];
    11 -> 12 [label=""];
}